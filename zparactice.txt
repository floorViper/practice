css 박스 모델:
 마진,보더,패딩,콘텐츠 로 박스모델이 이루어져있다.
 1. box-sizing: border-box (padding, border까지 width에 포함. 마진 제외.편하다 IE8부터지원)
 2. box-sizing: content-box (전통적인 css지만 패딩,보더가 widthd에 더해지지않는다.  )

css 초기화:
-브라우저 기본으로 적용된 스타일을 없애기위해
-에릭마이어의 cssReset이 가장 유명
-따로 기본스타일을 초기화하고싶다면 *{margin:0;padding:0;} 식으로 해도 되지만, 렌더링속도에 영향을 미친다고하여 요즘은 h1,p{} 식으로 초기화한다.

오버플로우:
-height는 기본값은 auto로 부모기준으로 자식의 높이를 가진다.
하지만 부모의 높이가 height:50px 같이 지정되어 자식보다 작은 수치를 가지면 자식 보다 낮아 감싸지 못하고 겹쳐보이게 된다.
이상황에서 overflow:hidden을 하면 넘치는 자식요소를 잘라내어 보인다.
(scroll은 스크롤로 나타낸다)
-자식 요소를 float로 띄우면 부모 요소는 자식이 없다 생각하고 높이를
치지 않는다. 이럴때도 overflow:hidden 으로 해결가능하다.
-또는 부모가 끝나는 지점에 floar을 해제해준다.(높이차지하도록)
-하지만 이런 목적으로 나온것은 아니다.
-body 요소만큼은 float의 요소도 책정이 되므로 일반 요소와는 다르다.(책임이 있다. 블록 포매팅 컨텍스트) 
 이 body의 특성을 요소에게 주기 위해 overflow 속성을 준다.(작은 body를 만든다고 생각) 높이도 지정할수 있고 높이가 작아도 scroll로 볼수있거나 높이가 없어도 자식을 감싼다.(overflow:scroll)
 정리하면,
1.overflow는 새로운 문서를 시작하는 일(느낌적인느낌)Block formatting context
2.이미지 참고
3.mdn block formatting context 문서 참고

상속:
 color 속성은 상속된다.
 -요소검사에서 inherired from div.box <=식으로 아래에 상속속성이 진하게 표시된다(반투명은 상속안된속성이고 -로 사선이 그어져있으면 하위에서 상속이 덮어진 속성)
 -구글에서 css 속성명 검색-mdn 에서 inherited 가 no인지 확인한다.
 -user-agent-stylesheet는 크롬에서 자체 스타일 입힌것. computed에 최종속성이 표시됨.
 -a{ color:inherit;} 부모로부터 상속받겠다.
 -특히 button 테그의 font가 기본속성이 많은데 초기화를 font:inherit; 주면 안정적으로 상속됨 
 -IE6,7 지원안됨
 -currentColor: 상속과 관계없지만 css3 속성으로 before에서 같은색상줄때 bgcolor 값으로 쓰인다(IE9이상지원)
 -em: before에서 상속된 폰트에 따라 크기를 조절할때 쓴다.
 -line-height를 쓸때 상속때문에 주의를 해야한다. em 단위로 주면 상속된 하위 line-height가 상속'될' font기준으로 잡히기떄문에 단위를안줘야함.

마진병합(겹침상쇄붕괴): .section { margin:20px} 블록요소가 2개 밑으로 나열될때 블록1의 하단마진,블록2의 상단마진이 겹친다.(20px) 
이것은 의도됀것으로 이롭다.
*인접한 block 요소끼리, 상하단에서만 해당한다.
부모 요소와 자식간 margin 겹침이 일어나 곤란할 경우가 있다.(마진이안나타난다) 패딩,보더를 줘도 되지만 부모 요소에 overflow:hedden 을 주면 가장 좋다. 새로운 작은 바디로 치기때문에 부모(wrapper)의 겹침이 없어진다.

ling-height: 
1.em , px 단위는 px로 환산되어 상속되기 때문에 단위를 붙이지 않고 사용해야 하위 요소에도 유연하게 대처한다.
2.line-height = 폰트 px+ 폰트마다 다른 수치의 리딩영역+@..리딩영역,@ 둘다 개념이다르고
 폰트마다 다름. (줄간격을 위해)그렇기 때문에 폰트마다 수치차이가 있다.  기본값인 normal(폰트마다 수치가다름)보다 고정적 수치로 적어주는게좋다.
3.라인헤이트를 늘리면 리딩영역이 늘어나는꼴.
4. 리딩영역은 컨트롤 불가하다. line-height: 1 은 폰트마다 리딩영역이 달라진다.(디자이너가 정한영역) 그래서 폰트종류마다 뒤죽박죽.

verticla-align: 
기본값 base-line. 인라인 요소의 수직정렬(위치)지정. 폰트에 따라 위치가 다르다.
예를들어 middle로 줄 경우, 폰트의 소문자 기준 가운데.(그러므로 고정적이지않다.)	
영어, 한글에 따라서도 다르다. 그러므로 글씨와 함께 가운데를 잡으려면 top을 주고 margin-top: ~em 으로 조절해 가운데를 잡는게 좋다.

인라인 속성 가운데정렬: 
 text-align: center; 상속된다. 그렇기에 하위에 block요소가 있다면
width사이즈가 지정된다면 가운데정렬이 안된다. 
그때는 block요소 margin: 0  auto; 로 정렬해준다.

반응형에서 div 너비높이 비율 유지:
height:100%가 안먹히기 때문에
1.하위 요소에 img요소를 하나 추가해 max-width:100%를 준다.(이미지 특성인 height:auto를 이용)
2. padding-top 수치를 100% 주면 부모요소의 높이를 가져오게된다. 이걸 응용해 높이/너비 수치를 %로  지정하면 비율을 유지한다.
3. iframe같은 비디오 요소를 넣을경우에도 응용가능. iframe에 position:apsolute;width:100%,height:100% left:0;,top:0 주고 
감싼부모에padding-top: 9/16 % 준다. (영상 16:9비율)

생각처럼 안돼는 height:100% :
1. width: auto;(지정 안했을떄) 요소의 부모 크기 기준으로 가득찬다.
height: auto;(지정 안했을떄)  요소의 자식 기준으로 자동 조절된다.
height:100%;  부모 height 를 받겠다.
body요소(height:auto)와 하위 요소(height:100%)가 서로 기준을 삼으면 높이를 못잡는다. 해결책으로 html,body {height:100%}를 주면 상위 100%를 차례로 참조해 해결가능
2. 최신 방법 : height: 100vh 디바이스 화면크기 기준으로 잡아주면 해결가능. 브라우저 지원확인(IE9이상 부분지원)

여러요소 가로 가운데 정렬(centering) : 
예를들어 페이지네이션
1.여러 요소를 inline-block 으로 가운데 정렬시 요소가 텍스트가 되기때문에 띄어쓰기 공간이 생긴다.
16px기준 4px이므로 margin 0 -2px로 네거티브마진해준다.
2. floar:left; 로 여러 요소 가운데, 부모margin: 0 auto; 정렬시 요소가 유동적으로 늘어나고 줄어들때는 정렬안됨.
부모의 가운데 너비를 넣어줘야함.

img태그 하단 알수없는 공간:
img 테그가 인라인 요소이고, 기본값인 vertical-align::baseline 때문에 리딩공간때문에 빈공간이 생긴다.
vertical-align:top or bottom 으로 해결한다.

텍스트 요소 가로,세로 가운데 정렬
1.span 요소로 텍스트를 감싸고 text-align:center; line-heignt: 부모크기+@; <- 이 방법은 텍스트가 2줄이 돼면 line-height때문에 줄간격이 커진다.
2.부모 블록 요소의 height 속성을 없애고 위아래 padding: 2em(적당한 수치) 0; 준다. 패딩값은 주고싶은 height값-폰트사이즈-리딩영역준다
3.이미지요소를 가운데정렬하려면 이미지도 inline요소이기에 line-height: 부모크기+@; vertical-align:middle; 주면됀다.

div 가로세로 정렬 : practice 폴더 코드

em, rem : 엠, 렘:
1. 유래: 금속활자에서 가장 넓은 M 기준으로 공간을 잡은 유래. 정사각형이고 엠스퀘어라한다. 
2. 1em 단위 안에 폰트가 들어간다. 폰트에 상응하는 디자인을 하기 용이하다.
3. .em{ border-left: 1em; line-height:1; width:1em; height:1em;}  온전한 폰트 크기가 됀다. 
4 . 하위 상속된 요소의 사이즈, 자간(letter-spacing:0.xem)을 글자크기에 따라 유동적으로바뀌게
5.  .box h2:before {
      content: '';
      display: inline-block;
      background-color: orange;
      width: 20px;
      height: 20px;
      border-radius: 50%
    } /*가상셀렉터 before를 이용해 h2테그 앞에 동그란 요소*/
    이와같은 요소 앞에 요소를 줄때도 폰트에 따라 달라지게 할때도 em 이용한다.

요소검사-user agent stylesheet 는 브라우저에서 자체적으로 적용된 css
   computed 는 최종 계산된 최종값px단위
 -em: before에서 상속된 폰트에 따라 크기를 조절할때 쓴다.
 -line-height를 쓸때 상속때문에 주의를 해야한다. em 단위로 주면 상속된 하위 line-height가 상속'될' font기준으로 잡히기떄문에 단위를안줘야함.

6. /*버튼의 폰트에 따라 padding이 유동적이 되기떄문에 시리즈 만들기 유용 */   
.button {
      background-color: #369;
      color: white;
      padding: 0.5em 1em;
      display: inline-block
    }

    .button.small {
      font-size: 12px
    }

    .botton.large {
      font-size: 12px
    }
7. 상속관계가 복잡해지면 예측이 어려워진다. 
-그래서 폰트사이즈는 rem단위를 쓰는게 좋다.
-그리고 여러 엘리먼트 padding, margin 도 위,아래 라던지 보기에 정렬되어야하고,
  수치가 달라 틀어지면 안돼는 상황이라면 rem단위를 쓰는게 좋다.
- 자신의 폰트 사이즈에 따라 자신엘레멘트가 직접 변하는 수치는 em(예로 버튼의패딩을이용한 크기조절)


가상 요소를 이용한 예제:
::after ::before :가상요소
:hover :last-child : 가상클래스
 .button:hover::after :가상요소에 가상 클래스 적용()
ex버전때문에 가상요소도 :로 사용
1.  요소 안의 content 앞,뒤 로 자식을 추가할수 있다.
   .counter:before {
       content: '약 ';
    }
   .counter:after {
   {
      content: 'cm';
   }
   이렇게 되면 counter 요소를 부모로 돔이 아닌 형식의 요소가 생긴다. 컨트롤 불가.
  ex6,7 지원 불가
2. button:after {
	content: attr(title);   <=버튼요소의 속성내용을 가져올수있다.
}
 .button:hover:after{
after 요소에 hover했을때 적용될 스타일
 }
position:apsolute를 주면 블록요소가 된다.

3. <div class="method"> .fadein(...)</div> <=이런게여러개일 경우 공통적인 .과 ()는 가상요소로 처리하면 좋다(before, after)
.method::before {
  content: '.';
  float: left; //엔터친것처럼 공간이 생겨 공백이 생긴다. 그것을없애기위해
}
-괄호에 요소 추가
<div class="method"> .fadein<div class=method-List>...</div></div>
.method-list::before { content: '('; float:left; }
.method-list:after { content: ')'; float:right; }

inline-block과 float 중 어떤것을 써야할까?
1.inline-block 정렬시 자식요소가 글씨처럼 취급되어 폰트의 y,g같은 글자의 영역(디센트하이트?)때문에 하단 공백이 생긴다.
그리고 엔터친 영역을 공백1자로 치기때문에 오른쪽 공백도 생긴다.
 해결책: -부모의 font-size:0  (편법)
        -네거티브 마진 margin: 0 -4px (폰트에따라 가변적이라 편법)
        -아래쪽 공간은 vertical-align:top으로 해결 
 장점: text-align:center로 쉽게 가운데정렬 가능하고 패딩과함께 컨텐츠에따라width사이즈가 자동 조절됌

2. floar: left로 정렬시 부모가 자식 높이를 못잡는다. 
 -overflow:hidden 또는 clear:both로 해결가능
 -element::after{content:'';display:block;clear:both;}
  근본의 목적은 가로정렬이 아니다.
  이미지와 어우러지기 위한 목적.
  장점: 정렬된자식아이템 a, b, c 각각 왼,오른쪽 정렬 가능해 자유도가 높다.(float:right)

포지션
relative: 원래위치기준
apsolute: 창 기준.부모가 relative면 부모기준






  

	
